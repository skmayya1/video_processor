generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id        String        @id
  userId    String
  videoId   String
  config    Json
  createdAt DateTime      @default(now())
  slug      String        @unique
  cover     String
  title     String
  pubId     String?
  status    ProjectStatus @default(queued)
  url       String?
  user      user          @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  short     short[]
}

model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  user      @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model user {
  name          String
  createdAt     DateTime
  email         String    @unique
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  user_id       String    @id
  Project       Project[]
  account       account[]
  session       session[]
}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model short {
  id            String   @id @default(uuid())
  projectId     String
  url           String
  title         String
  highlightText String
  from          Float
  to            Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum ProjectStatus {
  queued
  analyzing
  completed
  failed
}
